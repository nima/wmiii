#!/bin/bash ####################################################################
#WMII_ROOT="${WMII_CONFPATH%%:*}"
: ${WMII_ROOT?}
. ${WMII_ROOT}/base.conf

function e_Urgent() {
    cid=$1
    #wmiir xwrite /client/${cid}/tags '+!URG'
}

function e_UrgentTag() {
    wm_notifier 3 "!URGENT($*)"&
}

function e_NotUrgent() {
    cid=$1
}

function e_NotUrgentTag() {
    tid=$1
}

function e_LeftBarClick() {
    tid=$1
}

function e_LeftBarMouseDown() {
    button=$1
    tid=$2
    case ${tid} in
        ${WMII_TAG_ACTIVE/*bar\//})
            : Do Nothing
        ;;
        ${WMII_TAG_ALERTER/*bar\//})
            echo ":)" | wm_bar_relabel ${WMII_TAG_ALERTER?}
        ;;
        ${WMII_TAG_PROFILE/*bar\//})
            case ${button} in
                ${MOUSE_R})
                    i=0
                    declare -a snaps=( "snap(S): snap S;" )
                    while read did; do
                        ((i++))
                        snaps[$i]="snap(${did}): snap ${did};"
                    done < <(xdpyinfo -ext XINERAMA|awk '$1~/head/{print$2}'|tr -d '[#:]')

                    declare dpms_switch;
                    case $(os_dpms switch) in
                        enabled) dpms_switch="disable";;
                        disabled) dpms_switch="enable";;
                    esac

                    declare -a dpms=(
                        "dpms(${dpms_switch}): os_dpms ${dpms_switch};"
                        "lock: user_wm_lock;"
                        "snooze: user_wm_lock && sudo pm-suspend --quirk-dpms-suspend --quirk-dpms-on;"
                        "quit:  wm_quit;
                        "
                    )

                    wm_context_menu\
                        "rehash(cf): wmiir xwrite /event Rehash cf;"\
                        "rehash(sb): wmiir xwrite /event Rehash sb;"\
                        "${snaps[@]}"\
                        "${dpms[@]}"
                ;;
                ${MOUSE_U}) wmiir xwrite /tag/sel/ctl 'select up'   2>/dev/null;;
                ${MOUSE_D}) wmiir xwrite /tag/sel/ctl 'select down' 2>/dev/null;;
            esac
        ;;
        *)
            case $button in
                ${MOUSE_L}) wm_tag_focus ${tid};;
                ${MOUSE_R})
                    #. TODO: A working but mostly uselss context menu:
                    #declare -i i=0
                    #declare -a clients
                    #while read line; do
                    #    set $line
                    #    cid="$1"
                    #    shift 4
                    #    title="$@"
                    #    clients[$i]="${title//:/-}:${cid}"
                    #    ((i++))
                    #done < <(wmiir read /tag/${tid}/index|grep ^[^#])
                    #wm_context_menu "${clients[@]}"
                    wm_context_menu "reload: wm_tag_exec_cmd ${tid} && call tag_exec_cmd ${tid}"
                ;;
            esac
        ;;
    esac
}

function e_RightBarClick() { printf ''; }
function e_RightBarMouseDown() {
    button=$1
    tid=$2
    case ${tid} in
        ${WMII_TAG_NOTICE/*bar\//})
            wmiir read ${WMII_TAG_NOTICE} | cut -d ' ' -f 4- | xclip -selection p -in;
            wmiir xwrite ${WMII_TAG_NOTICE} '';
        ;;
        ${WMII_TAG_CRUMBS/*bar\//}) wm_tag_focus ;;
        *)
            flock="$(sb_state_f ${tid})"
            switch=1
            [ ! -f "${flock}.${button}" ] || switch=$((1^$(cat ${flock}.${button})))
            echo ${switch} > ${flock}.${button}
            case ${button} in
                ${MOUSE_M})
                    wm_notifier 3 "${tid}(${button},${switch})" ${switch}&
                ;;
            esac
            wm_sb_exec_module ${tid} ${button} ${switch}&
        ;;
    esac
}

function e_ClientFocus() {
    cid=$1
    if [ "${cid}" != "<nil>" ]; then
        title="$1 $(wmiir read /client/$1/props 2>/dev/null|awk -F: '{print$2}')"
        if [ $? -eq 0 ]; then
            echo "${title}" | wm_bar_relabel ${WMII_TAG_ACTIVE}
            #transset -a 0.7 -i ${cid} >/dev/null
            #sleep 0.2
            #transset -a 1.0 -i ${cid} >/dev/null
        else
            echo "?" | wm_bar_relabel ${WMII_TAG_ACTIVE}
        fi
    else
        echo "-" | wm_bar_relabel ${WMII_TAG_ACTIVE}
    fi
}

function e_ClientUnfocus() {
    #. TODO this doesn't actually have a real wmii event, so never called.
    cid=$1
    transset -a 1.0 -i ${cid} >/dev/null
}

function e_Notice() {
    wm_notifier 3 "[ NOTICE: $@ ]" off&
}

function e_UnresponsiveClient() {
    cid=$1
    logger DEBUG "Client \`${cid}' is acting gay..."
    {
        msg="The following client is acting gay. What now?$wi_newline";
        resp=$(
            wihack -transient $1 gxmessage -nearmouse \
                -buttons Kill,Wait \
                -print -fn "${WMII_FONT%%,*}" "$msg $(wmiir read /client/sel/label)"
        )
        [ ${resp} == "Kill" ] && wmiir xwrite /client/${cid}/ctl slay&
    }&
}

function e_CreateClient() {
    beeper create&
}

function e_DestroyClient() {
    beeper delete&
}

function e_DestroyTag() {
    tid=$1
    wmiir remove /lbar/${tid}
}

function e_ClientMouseDown() {
    tid=$1
    button=$2
    case ${button} in
        ${MOUSE_L})
            #urgent=$(wmiir read /client/sel/ctl|awk '$1~/Urgent/{print$2}')
            #if [ "${urgent}" == "on" ]; then
            #    echo 'Urgent off'|wm_bar_relabel /client/sel/ctl
            #elif [ "${urgent}" == "off" ]; then
            #    echo 'Urgent on'|wm_bar_relabel /client/sel/ctl
            #fi
            #wmiir xwrite /client/${cid}/tags '-!URG'
            printf '';
        ;;
        ${MOUSE_R})
            wm_context_menu \
                "Kill:         wmiir xwrite /client/sel/ctl kill;"\
                "Translucency: transset -t -p"\
                "Copy:         wm_cnt_sel|xclip -selection p -in;"\
                "Slay:         wmiir xwrite /client/sel/ctl slay;"\
                "Fullscreen:   wmiir xwrite /client/sel/ctl Fullscreen on;"\
                "Float:        wmiir xwrite /tag/sel/ctl 'send sel toggle';"
        ;;
    esac
}

function e_UnfocusTag() {
    declare tid=$1
    wmiir xwrite /lbar/${tid} "colors ${WMII_UFOCUS_COLORS}"
    #$(wm_tag_namemap ${tid})
}

#. TODO: wm_repain gets called twice when a tag is created, once when created, once when focused
#. TODO: (since the events CreateTag and FocusTag are both raised in such a case).  This is
#. TODO: inefficient, so fix it.
function e_CreateTag() {
    declare tid=$1
    wm_repaint ${tid}&
    wm_tag_exec_cmd ${tid}   #. System
    call tag_exec_cmd ${tid} #. User
    logger DEBUG "1. ${WMII_FOCUS_COLORS} $(wm_tag_namemap ${tid})"
    echo "${WMII_FOCUS_COLORS}" "$(wm_tag_namemap ${tid})" | wm_bar_mk /lbar/${tid}
}

function e_FocusTag() {
    declare tid=$1
    wm_repaint ${tid}&
    logger DEBUG "2. wmiir xwrite /lbar/${tid} ${WMII_FOCUS_COLORS} $(wm_tag_namemap ${tid})"
    wmiir xwrite /lbar/${tid} "colors ${WMII_FOCUS_COLORS}"
    #$(wm_tag_namemap ${tid})
}
