#!/bin/bash
: ${WMII_ROOT?}
. ${WMII_ROOT}/user.conf

#. CONSTANTS - Special Tags (Requires Restart) -={
#. ! for left-most placement
#. ~ for right-most placement
WMII_TAG_PROFILE="/lbar/!profile"
WMII_TAG_ACTIVE="/lbar/~active"
WMII_TAG_ALERTER="/lbar/~alerter"   #. Long-Lived Critical Alerts

WMII_TAG_NOTIFIER="/rbar/!notifier" #. Short-Lived Messages
WMII_TAG_NOTICE="/rbar/!notice"     #. Long-Lived Message Board
WMII_TAG_CRUMBS="/rbar/~crumbs"

WMII_HIST="${WMII_CACHE_SHM}/history"

#. Refresh status bar every X seconds
STATUS_REFRESH=0.987654321

#. Our favourite wmii key
MOD_ALT=Mod1
MOD_SUPER=Mod2
MOD_MAIN=Mod4

#. Semaphore lock codes
LOCK_ALIVE=101         #. Set to 1 while wmii is running, 0 means wmii is shutting down
LOCK_SB_ALIVE=102      #. Used to wait for statusbar processes to complete before killing the loop and starting a new one.
LOCK_SB_MULTIPLEX=103  #. Max out statusbar.d/ modules queue size (32)
LOCK_SB_MODULE=104     #. Max out concurrent modules running in parallel (12)
LOCK_ALERT=105         #. Used to lock te alert status bar item
LOCK_USER=106          #. Used for calls to user-defined functions

MOUSE_L=1
MOUSE_M=2
MOUSE_R=3
MOUSE_U=4
MOUSE_D=5
MOUSE_S=8

#. 1.7  Error Code Constants -={
true
TRUE=$?
CODE_SUCCESS=${TRUE?}

false
FALSE=$?
CODE_FAILURE=${FALSE?}

CODE_NOTIMPL=2

#. 64..127 Internal
CODE_USER_MAX=63
CODE_DISABLED=64

CODE_DEFAULT=${CODE_FAILURE?}

#. 128..255 General Error Codes
CODE_E01=128
CODE_E02=129
CODE_E03=130
CODE_E04=131
CODE_E05=132
CODE_E06=133
CODE_E07=134
CODE_E08=135
CODE_E09=136

CODE_IMPORT_GOOOD=${CODE_SUCCESS} #. good module
CODE_IMPORT_ERROR=${CODE_E01}     #. invalid/bad module (can't source/parse)
CODE_IMPORT_ADMIN=${CODE_E02}     #. administratively disabled
CODE_IMPORT_UNDEF=${CODE_E03}     #. no such module
CODE_IMPORT_UNSET=${CODE_E04}     #. no module set

export WMIII_DELIM=$(printf "\x07")
export WMIII_DELOM=$(printf "\x08")
#. }=-

function os_dpms() {
    if [ $# -eq 0 ]; then
        xset q|awk '$1~/Monitor/{print(tolower($3))}'
    else
        case $1 in
            on)
                xset reset
                xset dpms force $1
            ;;
            off)
                ( sleep 3.01; xset dpms force $1 )& disown
            ;;
            switch)
                xset q|awk '$0~/DPMS is/{print(tolower($3))}'
            ;;
            disable)
                xset -dpms
                xset s off
            ;;
            enable)
                xset +dpms
                xset s on
            ;;
        esac
    fi
}
#. }=-
#. (wm_) Window Manager Functions -={
function wm_quit() {
    wmiir xwrite /event Quit
    return $?
}

function wm_unused_menu() {
    prompt="$@"
    dmenu=$(
        wmiir read /ctl | awk '
$1~/focuscolors/{sb=$3;sf=$4};
$1~/normcolors/{nb=$3;nf=$4};
END{printf("dmenu -p \"'${prompt}'\" -nb \"%s\" -nf \"%s\" -sb \"%s\" -sf \"%s\"",nb,nf,sb,sf)};
')
    while read menuitem; do
        echo $menuitem
    done | eval ${dmenu}
}

#. Context Menus and Context for Context Menus -={
function wm_context_menu() {
    #. wm_context_menu example -={
    : <<!ex
    declare -a zip=(
        "0:echo 0;"
        "1:echo 1;"
        "2:echo 2;"
    )
    wm_context_menu "${zip[@]}"
!ex
    #. }=-
    #. Click menue initialization
    local -a data
    local token
    if [ $# -eq 0 ]; then
        while read token; do
            data+=( "${token}" )
        done
    else
        data+=( "${@}" )
    fi

    if res=$(wmii9menu -- "${data[@]}"); then
        eval "${res}"
        if [ $? -eq 0 ]; then
            logger DEBUG "wm_context_menu: PASS"
        else
            logger ERR "wm_context_menu: FAIL"
        fi
    else
        logger ERR "wm_context_menu: MISS"
    fi
}

#. These functions basically use the `b' clipboard buffer in X, leaving you
#. `p' and `s' for your copy-paste requirements.
function wm_get_context() {
    #. index -1 -> returns key itself
    #. index  N -> returns value[N], delimited by '|'
    #. no index -> returns entire value in raw format
    local -i e=1

    if [ -e ~/.wmii/context.conf ]; then
        if [ $# -le 1 ]; then
            local index=${1:-NA}
            local context="$(xclip -out -selection b)"
            while read c; do
                IFS=: read k v <<< "${c}"
                if [ "${k}" == "${context}" ]; then
                    case $#:${index} in
                        0:NA)
                            echo "${v}"
                            e=0
                            break
                        ;;
                        1:-1)
                            echo "${k}"
                            e=0
                            break
                        ;;
                        1:*)
                            if [ ${index} -lt ${#data[@]} ]; then
                                IFS='|' read -a data <<< "${v}"
                                echo ${data[${index}]}
                                e=0
                                break
                            fi
                        ;;
                    esac
                fi
            done < <(cat ~/.wmii/context.conf)
        fi
    fi

    return $e
}

function wm_set_context() {
    local -i e=1

    if [ -e ~/.wmii/context.conf ]; then
        if [ $# -eq 1 ]; then
            while read c; do
                IFS=: read k v <<< "${c}"
                if [ "${k}" == "$1" ]; then
                    xclip -in -selection b <<< "${k}" 2>/dev/null
                    e=$?
                    break
                fi
            done < <(cat ~/.wmii/context.conf)
        fi
    fi

    return $e
}
#. }=-

function wm_tag_namemap() {
    declare tid=$1
    declare mapped=${tid}
    #. Numbers in Persian
    #if [[ ${tid}  =~ ^[0-9]$ ]]; then
    #    declare -i zero=0x06F0
    #    read symbol <<< $(printf "%04X" $(( ${zero} + ${tid} )))
    #    read mapped <<< $(printf "\u${symbol}")
    #fi
    echo ${mapped}
}

function wm_bar_rm() {
    local path="${1}"

    wmiir remove ${path} 2>/dev/null
    e=$?

    logger DEBUG "wm_notifier->remove(${path}): $e"
    return $e
}

function wm_bar_mk() {
    local path="${1}"
    local mid="$(basename ${path})"
    rm -f ${SB_MODULE}/${mid}/disabled

    read -t 1 -a tokens
    local colors=${tokens[@]:0:3}
    local label="${tokens[@]:3}"
    cat <<! | wmiir create ${path} 2>/dev/null
colors ${colors}
label ${label}
!
    e=$?

    logger DEBUG "wm_notifier->create(${path}): $e"
    return $e
}

function wm_bar_write() {
    local -i e=1

    local path="${1}"
    local mid="$(basename ${path})"
    rm -f ${SB_MODULE}/${mid}/disabled

    read -t 1 -a tokens
    local colors=${tokens[@]:0:3}
    local label="${tokens[@]:3}"

    cat <<! | wmiir write ${path} 2>/dev/null
colors ${colors}
label ${label}
!
    e=$?

    logger DEBUG "wm_notifier->write(${path}): $e"
    return $e
}

function wm_bar_relabel() {
    local -i e=1

    local path="${1}"
    local mid="$(basename ${path})"
    rm -f ${SB_MODULE}/${mid}/disabled

    read -t 1 -a tokens
    local label="${tokens[*]}"

    cat <<! | wmiir write ${path} 2>/dev/null
label ${label}
!
    e=$?

    logger DEBUG "wm_notifier->relabel(${path})=\`${label}': $e"
    return $e
}


function wm_notifier() {
    #. This function depends on the _mn_sb_notifier_clear_loop() loop
    #. for its periodic cleanup.
    lck ${LOCK_ALERT} on

    declare -i s=$1
    data=$2
    beep=$3

    echo "${WMII_NOTIFIER_COLORS}" "[ $data ]" | wm_bar_mk ${WMII_TAG_NOTIFIER} 2>/dev/null

    test -z "${beep}" || beeper "${beep}"

    if [ $s -gt 0 ]; then
        echo $(($(date +'%s')+$s)) > ${SB_NOTIFIER_LOCKFILE}
    fi

    lck ${LOCK_ALERT} off
}

function wmiii:magic() {
    local -i e=${CODE_FAILURE?}

    local -a args
    if [ $# -eq 0 ]; then
        args=( $(xclip -selection p -out) )
    else
        args=( "$@" )
    fi

    local cmd
    local regex
    local pdataraw
    while read -a line; do
        for pdataraw in ${args[@]}; do
            regex="${line[1]}"
            logger DEBUG "data:${line[*]}"
            logger DEBUG "regex:${regex}"
            if [[ ${pdataraw} =~ ${regex:1:-1} ]]; then
                cmd="${line[*]:3}" #. 4th token onwards is the command
                for ((i=0; i<${#BASH_REMATCH[@]}; i++)); do
                    cmd=${cmd//%${i}/${BASH_REMATCH[i]}}
                done

                local context
                context=$(wm_get_context)
                if [ $? -eq ${CODE_SUCCESS?} ]; then
                    local replacement
                    while [[ ${cmd} =~ %\{context\[(.*)\]\} ]]; do
                        replacement="$(wm_get_context ${BASH_REMATCH[1]})"
                        cmd="${cmd//%\{context*\}/${replacement}}"
                    done

                    if [[ ${cmd} =~ %\{context\} ]]; then
                        replacement="$(wm_get_context)"
                        cmd="${cmd//%\{context\}/${replacement}}"
                    fi
                fi

                logger DEBUG "cmd:${cmd}"
                ${cmd}

                e=${CODE_SUCCESS?}
            fi
        done
    done < <(awk '$1~/^%$/&&$3~/^'${WMII_PROFILE?}'$/{print$0}' ${WMII_ROOT?}/tags.conf)

    return $e
}

function wm_tag_data() {
    local e=2

    if [ ! -f ${WMII_ROOT}/tags.conf ]; then
        wm_notifier 0 "Error: tags.conf missing"
        return $e
    fi

    if [ $# -ge 1 ]; then
        e=1
        local op="$1"
        local answer=
        case ${op}:$# in
            cmd:2) #. <tag-command> associated with a given <tag-id>
                local tid="$2"
                local cmd=$(sed -n 's/^ *\([0-9a-zA-Z!]\|F[0-9]\+\) \+'${tid}' \+[A-Z|]*\<'${PROFILE}'\>[A-Z|]* \+\(.*\)$/\2/p' ${WMII_ROOT}/tags.conf)
                [ -n "${cmd}" ] ||
                    [ "${PROFILE}" == "${PROFILE%%@*}" ] ||
                    cmd=$(sed -n 's/^ *\([0-9a-zA-Z!]\|F[0-9]\+\) \+'${tid}' \+[A-Z|]*\<'${PROFILE%%@*}'\>[A-Z|]* \+\(.*\)$/\2/p' ${WMII_ROOT}/tags.conf)

                [ -n "${cmd}" ] ||
                    cmd=$(sed -n 's/^ *\([0-9a-zA-Z!]\|F[0-9]\+\) \+'${tid}' \+[A-Z|]*\<ALL\>[A-Z|]* \+\(.*\)$/\2/p' ${WMII_ROOT}/tags.conf)

                if [ -n "${cmd}" ] && [ "${cmd}" != '!' ]; then
                    answer="${cmd}"
                    e=$?
                else
                    #. Nothing yet, how about a regex match then?
                    answer="wmiii:magic ${tid}"
                fi
            ;;
            dynamic:2) #. Is this <tag-id> a dynamic tag, as a result of a regex match or otherwise an arbitrary tag name
                local tid="$2"
                if [ "${tid}" == "${FIRST_TAG_ID}" ]; then
                    e=0
                elif [ ! -z "${tid#[0-9]}" ]; then
                    local cmd=$(sed -n 's/^ *\([0-9a-zA-Z!]\|F[0-9]\+\) \+'${tid}' \+[A-Z|]*\<'${PROFILE}'\>[A-Z|]* \+\(.*\)$/\2/p' ${WMII_ROOT}/tags.conf)
                    [ -n "${cmd}" ] || cmd=$(sed -n 's/^ *\([0-9a-zA-Z!]\|F[0-9]\+\) \+'${tid}' \+[A-Z|]*\<ALL\>[A-Z|]* \+\(.*\)$/\2/p' ${WMII_ROOT}/tags.conf)
                    [ -n "${cmd}" ] || e=0
                fi
            ;;
            tid:2) #. <tag-id> associated with <tag-key>
                local tkey=$2
                local name=$(sed -n 's/^ *'${tkey}' \+\([^ ]\+\) \+[A-Z|]*\<'${PROFILE}'\>[A-Z|]* \+.*$/\1/p' ${WMII_ROOT}/tags.conf)
                [ -n "${name}" ] || [ "${PROFILE}" == "${PROFILE%%@*}" ] || name=$(sed -n 's/^ *'${tkey}' \+\([^ ]\+\) \+[A-Z|]*\<'${PROFILE%%@*}'\>[A-Z|]* \+.*$/\1/p' ${WMII_ROOT}/tags.conf)
                [ -n "${name}" ] || name=$(sed -n 's/^ *'${tkey}' \+\([^ ]\+\) \+[A-Z|]*\<ALL\>[A-Z|]* \+.*$/\1/p' ${WMII_ROOT}/tags.conf)
                if [ -n "${name}" ]; then
                    answer="${name}"
                    e=0
                else
                    : noop
                fi
            ;;
            *)
                logger ERR "Internal error, bad use of ${FUNCNAME} ($*)"
            ;;
        esac
    fi

    echo -ne "${answer}"
    return $e
}

function wm_tag_exec_cmd() {
    local tid=$1
    local cmd="$(wm_tag_data cmd ${tid})"

    if [ -n "${cmd}" ] && [ "${cmd}" != '!' ]; then
        wm_notifier 3 "Executing ${tid} commands..."&
        read -a cmd_array <<< "${cmd}"
        t=$(type -t ${cmd_array[0]})
        if [ $? -eq 0 ]; then
            logger DEBUG "($tid)[${t}] -> \`eval \"${cmd}\"'"
            case ${t} in
                file)
                    (
                        echo "${tid} launched" | plogger INFO "exec(${cmd_array[0]})";
                        eval exec wmiir setsid "${cmd}" 2>&1 | plogger INFO "exec(${cmd_array[0]})";
                        echo "${tid} terminated" | plogger INFO "exec(${cmd_array[0]})";
                    )& disown
                ;;
                function)
                    (
                        echo "${tid} launched" | plogger INFO "fn(${cmd_array[0]})";
                        eval "${cmd}" 2>&1 | plogger INFO "fn(${cmd_array[0]})";
                        echo "${tid} terminated" | plogger INFO "fn(${cmd_array[0]})";
                    )& disown
                ;;
                alias)
                    (
                        echo "${tid} launched" | plogger INFO "alias(${cmd_array[0]})";
                        eval "${cmd}" 2>&1 | plogger INFO "alias(${cmd_array[0]})";
                        echo "${tid} terminated" | plogger INFO "alias(${cmd_array[0]})";
                    )& disown
                ;;
                *)
                    echo "${tid} ignored" | plogger NOTICE "${t}(${cmd_array[0]})";
                ;;
            esac
        else
            echo "${tid} ignored" | plogger ERR "undefined(${cmd_array[0]})";
        fi
    fi

    #. TODO - Views - display clients matching a regex from other tags
    #regex=$(sed -n 's/^\(F[0-9]\{1,2\}\) \+'${tid}' \+\(.*\)$/\2/p' ${WMII_ROOT}/tags.conf)
    #elif [ -n "${regex}" ]; then
    #    for cid in $(wmiir ls /client/); do
    #        if wmiir cat /client/${cid}/label|grep -qE "${regex}"; then
    #            logger DEBUG "regex match: ${regex} -> ${cid/\//}"
    #            wmiir xwrite /client/$cid/tags "+${tid}"
    #        fi
    #    done
    #fi
}

function wm_cnt_sel() {
    wmiir read /client/sel/ctl | sed 1q | tr -d '\n'
}

function wm_tag_sel() {
    wmiir read /tag/sel/ctl|head -n1
}

function wm_sb_active()  {
    local mid=${1}
    declare -i e=95
    if [ $# -eq 1 ]; then
        e=1
        local script=${WMII_ROOT}/statusbar.d/${mid}
        [ -x ${script} -a ! -e ${SB_MODULE}/${mid}/disabled ]
        e=$?
    elif [ $# -eq 2 ]; then
        if [ $2 == "on" ]; then
            rm -f ${SB_MODULE}/${mid}/disabled
            e=$?
        elif [ $2 == "off" ]; then
            touch ${SB_MODULE}/${mid}/disabled
            wm_bar_rm /rbar/${mid}
            e=$?
        fi
    fi
    return $e
}

function wm_sb_exec_module() {
    lck ${LOCK_SB_MULTIPLEX} on

    local mid=$1
    local button=$2
    local switch=$3

    if wm_sb_active ${mid}; then
        local script=${WMII_ROOT}/statusbar.d/${mid}
        local data; #. keep local as separate statement, otherwise $? = 0
        data="$(${script} ${button} ${switch})"
        declare -i e=$?
        if [ $e -eq 0 ]; then
            [ -n "${data}" ] || data='label NA'
            echo -e "${data}" | wmiir write /rbar/${mid}
            logger DEBUG "load(${mid})...complete"
        else
            wm_sb_active ${mid} off
            logger NOTICE "load(${mid})...failed /* exit($e), module deactivated */"
        fi
    fi

    lck ${LOCK_SB_MULTIPLEX} off
}

#. Calling user functions (user.conf's user_<fn>)
function callable() {
    local -i e=1
    if [ $# -eq 1 ]; then
        local fn
        fn=user_$1
        type -t $fn >/dev/null
        e=$?
    fi
    return $e
}

function call() {
    #. Usage: call [--fg|--bg] <user_fn> <args>
    local fn
    local opt='bg'
    logger DEBUG "args: $*"
    if [ ${1:0:2} == '--' ]; then
        opt=${1:2}
        shift 1
    fi

    e=1
    if [ $# -ge 1 ]; then
        fn=$1
        if callable $fn; then
            shift 1
            if [ "${opt}" == "fg" ]; then
                user_$fn $*
                e=$?
            elif [ "${opt}" == "bg" ]; then
                lck ${LOCK_USER} on
                ( user_$fn $*; lck ${LOCK_USER} off )& disown
                e=$?
            fi
        fi
    fi
    return $e
}

function wm_rootbg() {
    local e=1

    local hashed=$(cd ${WMII_ROOT?} && git rev-parse --short HEAD)
    local product=/tmp/$(hostname -s)-${hashed}.png
    if requires convert; then
        if [ ! -f ${product} ]; then
            local -i s=20
            local -A themes
            #. http://www.imagemagick.org/Usage/canvas/
            local -i seeded=$(printf '%d' 0x${hashed:0:4})
            local version=$(cd ${WMII_ROOT?} && git describe --abbrev=1 --tags)
            local when=$(cd ${WMII_ROOT?} && git show -s --format=%ci HEAD)
            xdpyinfo -ext XINERAMA | sed '/^  head #/!d;s///' |
                while IFS=' :x@,' read i w h x y; do
                    #. http://www.imagemagick.org/script/color.php
                    local colors=(
                        DeepPink red PaleVioletRed DarkOrchid
                        MediumPurple1 RoyalBlue1 CornflowerBlue DodgerBlue
                        DeepSkyBlue CadetBlue1 MediumAquamarine PaleGreen
                        GreenYellow gold DarkGoldenrod1 OrangeRed
                    )
                    #read sha1 file <<< "$(sha1sum <(echo ${version}))"
                    local color_index=$((0x${hashed:0:1}))
                    themes[frac]="-size ${w}x${h} plasma:fractal"
                    themes[fish]="-size ${w}x${h} xc: +noise Random -virtual-pixel tile -blur 0x20 -auto-level"
                    themes[wirl]="-size $((${w}+${s}*2))x$((${h}+${s}*2)) plasma:black-white -swirl 90 -shave ${s}x${s}"
                    themes[dead]="-size ${w}x${h} plasma:black-${colors[${color_index}]}"
                    convert\
                        -seed ${seeded} ${themes[dead]}\
                        -font 'Elektra-Text-Pro-Italic' -fill white -pointsize 40\
                        -draw "text 64,128 'wmiii ${version} @ ${when}'"\
                        ${product}
                    break
                done
        fi
    fi

    echo ${product}
    test -e ${product}
    e=$?

    return $e
}

function wm_repaint() {
    : ${FIRST_TAG_ID?}

    local tid=$1
    if [ -n "${tid}" ]; then
        local etid=${tid} #. Effective TID (dynamic TIDs are assigned an etid of FIRST_TAG_ID)
        wm_tag_data dynamic ${tid}
        local -i dynamic=$?
        [ ${dynamic} -ne 0 ] || etid=${FIRST_TAG_ID}

        local _WMII_FOCUS_COLORS=$( printf "#%06x #%06x #%06x" ${COL_FG[FOCS]} ${COL_BG[FOCS]} ${COL_BD[FOCS]})
        local _WMII_UFOCUS_COLORS=$(  printf "#%06x #%06x #%06x" ${COL_FG[UFOC]} ${COL_BG[UFOC]} ${COL_BD[UFOC]})
        local _WMII_BARPOS=${WMII_BARPOS}
        if grep -qE "^\<${etid}\>" ${WMII_ROOT}/tagcols.conf; then
            _WMII_FOCUS_COLORS=$(awk '$1~/^'${etid}'$/{printf("#%s #%s #%s\n",$2,$3,$4)}' ${WMII_ROOT}/tagcols.conf)
            _WMII_UFOCUS_COLORS=$(awk '$1~/^'${etid}'$/{printf("#%s #%s #%s\n",$5,$6,$7)}' ${WMII_ROOT}/tagcols.conf)
            _WMII_BARPOS=$(awk '$1~/^'${etid}'$/{print$8}' ${WMII_ROOT}/tagcols.conf)
        fi
        wmiir write /ctl <<!
normcolors  $_WMII_UFOCUS_COLORS
focuscolors $_WMII_FOCUS_COLORS
bar         on ${_WMII_BARPOS:-${WMII_BARPOS}}
!

        #. XXX Too slow, let's just give up.
        return

        if [ "${tid}" == "$(wm_tag_sel)" ]; then
            local bgimg
            if [ ${dynamic} -eq 0 ]; then
                bgimg=$(wm_rootbg)
                test $? -ne 0 || feh --no-fehbg --bg-center ${bgimg}
            elif [ -e ${WMII_BACKGROUND_IMAGES}/${tid}.png ]; then
                bgimg=${WMII_BACKGROUND_IMAGES}/${tid}.png

                #. FIXME: broken with this output:
                #. DFP10 connected primary 1920x1200+0+0 (normal left inverted right x axis y axis) 495mm x 310mm
                local X Y P
                local screen_resolution="$(
                    xrandr |
                    sed -e 's/connected primary/connected/' |
                    awk -F '[+ ]' '$2~/^connected$/&&$4==0&&$5==0{print$3}'
                )"
                IFS=x read X Y <<< "${screen_resolution}"
                ((P=X*Y))

                local x y p
                local imgdata=$(identify -format '%[fx:w]x%[fx:h]' ${bgimg})
                IFS=x read x y <<< "${imgdata}"
                ((p=x*y))

                local -i percent=100
                ((percent*=p/P))
                if [ $percent -gt 64 ]; then
                    feh --no-fehbg --bg-center ${bgimg}
                else
                    feh --no-fehbg --bg-tile ${bgimg}
                fi
                logger DEBUG "$(basename ${bgimg}): $x/$X $y/$Y $p/$P -> $percent"
            elif callable wm_repaint; then
                call wm_repaint ${tid}
                bgimg=${WMII_BACKGROUND_IMAGES}/${tid}.png
                if [ -e "${bgimg}" ]; then
                    feh --no-fehbg --bg-tile ${bgimg}
                else
                    logger NOTICE "Missing ${bgimg}"
                fi
            fi
        fi
    else
         logger ERROR "Internal error: no TID supplied in function call to ${FUNCNAME}."
    fi
}

WM_XRAY_SHM="${WMII_SHM}/xray-${FIRST_TAG_ID}"
WM_XRAY_STATE=0
function wm_xray_toggle() {
    xcalib -a -i
    WM_XRAY_STATE=$((WM_XRAY_STATE^1))
    echo ${WM_XRAY_STATE} > ${WM_XRAY_SHM}
}
function wm_xray_enforce() {
    local wm_xray_state=0
    local tid_req=$1
    WM_XRAY_SHM="${WMII_SHM}/xray-${tid_req}"
    test ! -f ${WM_XRAY_SHM} || wm_xray_state=$(cat ${WM_XRAY_SHM})
    if [ ${wm_xray_state} -ne ${WM_XRAY_STATE} ]; then
        wm_xray_toggle
    fi
}

WM_TAG_LAST=1
WM_TAG_THIS=1
function wm_tag_focus() {
    tid_req="${1:-${WM_TAG_THIS}}"

    if [ "${WM_TAG_THIS}" != "${tid_req}" ]; then
        WM_TAG_LAST="${WM_TAG_THIS}"
        WM_TAG_THIS="${tid_req}"
    else
        WM_TAG_THIS="${WM_TAG_LAST}"
        WM_TAG_LAST="${tid_req}"
    fi

    if [ "${WM_TAG_THIS}" != "${WM_TAG_LAST}" ]; then
        wmiir xwrite /ctl view ${WM_TAG_THIS}
        local tagtoggle="${WM_TAG_LAST}->${WM_TAG_THIS}"
        wm_xray_enforce ${WM_TAG_THIS}
        echo "${tagtoggle}" | wm_bar_relabel ${WMII_TAG_CRUMBS}
    fi
}

function snap() {
    local -i e=1
    local -a required=( xclip scrot xdpyinfo import )
    if [ ${#SCREENSHOT_D} -gt 0 ] && requires ${required[@]}; then
        test -d ${SCREENSHOT_D} || mkdir -p ${SCREENSHOT_D}
        local img=${SCREENSHOT_D}/snap-$1.png
        if [ "$1" == "S" ]; then
            scrot -s ${img}
            e=$?
        else
            #. https://wiki.archlinux.org/index.php/Taking_a_Screenshot
            xdpyinfo -ext XINERAMA | sed '/^  head #/!d;s///' |
                while IFS=' :x@,' read i w h x y; do
                    import -window root -crop ${w}x$h+$x+$y ${img}
                done
            e=$?
        fi

        if [ $e -eq 0 ]; then
            local url
            url=$(paintit ${img})
            e=$?
            echo ${url}|xclip -selection p -in
            rm -f ${img}
        fi
    else
        if [ ${#SCREENSHOT_D} -eq 0 ]; then
            logger ERR "snap(env): SCREENSHOT_D not set; FAIL"
        else
            logger ERR "snap(requires): missing one or more of ${required[@]}; FAIL"
        fi
    fi
    return $e
}

function lock_screen() {
    wm_tag_focus "snooze"
    (
        os_dpms off
        xlock -startCmd "${SCREENLOCKCMD}" -endCmd "${SCREENUNLOCKCMD}"
    )& disown
}
#. }=-
#. }=-
