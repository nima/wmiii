#!/bin/bash
: ${WMII_ROOT?}
. ${WMII_ROOT}/core.conf

INITD=/etc/rc.d/init.d
SCREENSHOT_D=${HOME}/Dropbox/Pictures/Snap/
SCREENLOCKCMD='echo Lock `date +"%d/%m/%y %H:%M"`>>~/.times' 
SCREENUNLOCKCMD='echo Unlock `date +"%d/%m/%y %H:%M"`>>~/.times'

WMII_TERM="/usr/bin/urxvt"
declare -a WMII_TERM_FG_RANGE=( 200 256 )

WMII_BACKGROUND='#FF0000'
WMII_BACKGROUND_IMAGES="${HOME}/Dropbox/Pictures/Background/Desktop"
WMII_BORDER_WIDTH=1
WMII_BARPOS=top
WMII_HISTLIM=16
WMII_PROFILE=${PROFILE-DEFAULT}
FIRST_TAG_ID=1

# Status bar module constants -={
WMII_STATUSBARDATEFORMAT=$(date +'%a %d/%m/%y %H:%M wk:%V')
if [ "${PROFILE}" == "HOME" ]; then
    VOLUMESTATUS="amixer get Master|awk '\$2~/Left/{print\$5,\$6}'|tr -d '[[]]'"
    VOLUMETOGGLE="amixer -q set Master toggle"
    VOLUMEUP="amixer -q set Master 5%+ unmute"
    VOLUMEDOWN="amixer -q set Master 5%- unmute"
fi
# }=-

#. Fonts -={
################################################################################
#. To select your wmii font, you have 2 venues:
#. Option 1
#.     xset q               #. shows your current font path
#.     xlsfonts             #. to list and view available <font>s
#.     xprop -font <font>   #. to view <font> details
#.     #. then enter them as usual - for example:
#.
#. Option 2 - XFT (Nice) fonts:
#.     fc-list         #. to list
#.     xfd -fa <font>  #. to view
#.     #. and to use thim in wmii, prefix with `xft:', as follows:
#.
#. Test your options with:
#.     wmiir xwrite /ctl "font xft:DejaVuSansMono-8"
#
#. To play around with these options:
#.     wmiir xwrite /ctl "font xft:DejaVu Sans Mono-9"
#.     fc-list|grep aenigma|awk -F: '{print$2}'|while read font; do echo $font;xterm -fa "$font"; done

WMII_FONT='xft:DroidSansMono-9'
#. Fonts }=-

#. Status bar module configuration {{
declare -g -A SB_CONF_SOCK=(
    [HOME]=17500
    [SIRCA]=17500
)
declare -g -A SB_CONF_SCREEN=(
    [DEC]=prtmon,dildos,ldapmanage
    [ALL]=supybot,irc,dildos
)
declare -g SB_CONF_MUZIK=${HOME}/doc/mewzik
#. }}
#. Color Theme et al. {{
declare -A COL_THM_FG
COL_THM_FG[DF]=0x33ff11
COL_THM_FG[PS]=0x0f3311
COL_THM_FG[NW]=0x11aaff
COL_THM_FG[HW]=0xff6611
COL_THM_FG[SW]=0xff0066
COL_THM_FG[BZ]=0xeeaa00

declare -A COL_FG
COL_FG[ALRT]=0xff3311
COL_FG[FOCS]=0x0073ff
COL_FG[UFOC]=0xaaaaaa
COL_FG[CRIT]=0xffffee
COL_FG[WARN]=0xffffee
COL_FG[NOTE]=0x111111
COL_FG[INFO]=0x111111
COL_FG[GOOD]=0x33ff33
COL_FG[NORM]=0xeeeeee
COL_FG[DULL]=0x333333

declare -A COL_BG
COL_BG[ALRT]=0x030303
COL_BG[FOCS]=0x030303
COL_BG[UFOC]=0x030303
COL_BG[CRIT]=0xff0000
COL_BG[WARN]=0xff6611
COL_BG[NOTE]=0xffee33
COL_BG[INFO]=0xffffff
COL_BG[GOOD]=0x1133ff
COL_BG[NORM]=0x010101
COL_BG[DULL]=0x010101

declare -A COL_BD
COL_BD[ALRT]=0xff0000
COL_BD[FOCS]=0x003399
COL_BD[UFOC]=0x000066
COL_BD[CRIT]=0x000066
COL_BD[WARN]=0x000066
COL_BD[NOTE]=0x000066
COL_BD[INFO]=0x000066
COL_BD[GOOD]=0x000066
COL_BD[NORM]=0x000066
COL_BD[DULL]=0x000066
#. }}

function terminal() {
    local -i n0=${WMII_TERM_FG_RANGE[0]}
    local -i n1=${WMII_TERM_FG_RANGE[1]}
    (( n1-=n0 ))
    local bgc=$( printf "#%x%x%x" $(( $RANDOM % $n1 + $n0 )) $(( $RANDOM % $n1 + $n0 )) $(( $RANDOM % $n1 + $n0 )) )
    wmiir setsid ${WMII_TERM} -fg "${bgc}" "$@";
}

function chrome() { wmiir setsid chrome $@; }
function ip() { /sbin/ifconfig $1 2>/dev/null | awk -F '[ :]+' '$0~/inet addr/{print $4}'; }

#. User Hooks {{
function user_search() {
    where=
    if [ $# -ge 1 ]; then
        where=$1
        shift

        if [ $# -eq 0 ]; then
            selected="$(echo $(xclip -out))"
        else
            selected="$@"
        fi

        case ${where} in
            i) recoll -a -q "$@";;
            o)

                if [ -n "${selected}" ]; then
                    if echo "${selected}" | grep -qE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'; then
                        surf "http://www.seomoz.org/ip2loc?ip=${selected}"
                        #chrome "http://www.bing.com/search?q=ip:${selected}"
                    elif echo "${selected}" | grep -qE '^http[s]?://'; then
                        surf "${selected}"
                    else
                        surf "https://encrypted.google.com/search?q=${selected}"
                    fi
                fi
            ;;
        esac
    fi
}

function user_wm_lock() {
    i3lock -p win -c 2672EC
    #xtrlock -b
    #xtrlock \
    #    -b \
    #    -startCmd 'echo Lock `date +"%d/%m/%y %H:%M"`>>~/.times' \
    #    -endCmd 'echo Unlock `date +"%d/%m/%y %H:%M"`>>~/.times'
}

function user_wm_quit() {
    echo Unlock `date +"%d/%m/%y %H:%M"`>>~/.times

    pkill chrome
    pkill pulseaudio
    sleep 3
    pkill chrome
    pkill pulseaudio
    sleep 5
    pkill -9 chrome
    pkill -9 pulseaudio
}

function user_wm_repaint() {
    if requires xstarfish; then
        if [ -d ${WMII_BACKGROUND_IMAGES} ]; then
            local bgimg=${WMII_BACKGROUND_IMAGES?}/${tid}.png
            if [ ! -f ${bgimg} ]; then
                wm_alerter 0 "decorating ${tid}..."
                xstarfish -s medium -o ${bgimg}
                wm_alerter 2 "decoration ${tid} complete"&
            fi
        fi
    fi
}

function user_tag_exec_cmd() {
    local tid=$1
    if [ -x ~/.wmii-scripts/${tid} ]; then
        . ~/.wmii/wmii.conf
        SELF=${tid}; . ~/.wmii-scripts/${tid}
        cssh ${hosts[@]}& disown
        webapp -i "${profile}" ${uris[@]}& disown
    fi
}

#. }}
#. Workbench {{
function autotile() {
    #done < <(xdpyinfo -ext XINERAMA|awk '$1~/head/{print$2}'|tr -d '[#:]')
    COUNT=$(column_count 1)
    if [ ${COUNT} -lt 18 ]; then
        echo
    elif [ ${COUNT} -lt 32 ]; then
        i=0
        while [ $(column_count 1) -gt 4 ]; do
            column_select 0 1
            k=$(( 1 + $i / 4 ))
            for j in $(eval echo {1..$(($k + $[ $k >= 4 ] ))}); do
                wmiir xwrite /tag/sel/ctl 'send sel right'
            done
            (( i++ ))
        done
    fi
}

function imgid() {
    SIZE=$(identify -ping $1|awk '{print$3}')
    echo ${SIZE}|sed 's/x[0-9]*$//'
}

function sound_test() {
    alsactl init
    amixer scontrols
    speaker-test -c 2
    cat /etc/modprobe.d/alsa-base.conf
    lsmod | grep '^snd' | column -t
}
#. }}

# Key definition
KEYS_USER=(
    XF86HomePage
    XF86AudioMute
    XF86AudioLowerVolume
    XF86AudioRaiseVolume
    XF86Favorites
    XF86Launch5
    XF86Launch6
    XF86Calculator
    XF86Mail
)

function user_mn_process_key() {
    processed=1
        case $1 in
            XF86AudioLowerVolume)
                eval ${VOLUMEDOWN};;
            XF86AudioRaiseVolume)
                eval ${VOLUMEUP};;
            XF86AudioMute)
                eval ${VOLUMETOGGLE};;
            XF86HomePage)
                wm_tag_focus "www";;
            XF86Search)
                wm_tag_focus "cal";;
            XF86Favorites)
                wm_tag_focus "hip";;
            XF86Launch5)
                wm_tag_focus "cal";;
            XF86Launch6)
                wm_tag_focus "jira";;
            XF86Launch7)
                wm_tag_focus "kb";;
            XF86Launch8)
                wm_tag_focus "ldap";;
            XF86Mail)
                wm_tag_focus "mail";;
            XF86Calculator)
               xcalc;;
            *)
                processed=0
            ;;
        esac
    return $processed
}
