#!/bin/bash
. ${WMII_ROOT?}/base.conf
. ${WMII_ROOT?}/events.conf

ACTIONS="Help Quit Restart Weather"
declare -g -a WM_SB_MODULES

#. Private OS Functions ################################################## {{ ##
function _os_proglist() {
    IFS=: read -a paths <<< "${PATH}"
    for path in ${paths[@]}; do
        find ${path} -maxdepth 1 \( -perm -0100 -o -perm -0010 -o -perm -0001 \) -printf '%f\n' 2>/dev/null;
    done | sort -u
}

function os_lck_count() {
    lck $1 status | awk '{print$1}'
}
#. }}
#. Private WM Functions ################################################## {{ ##
function _wm_col_count() {
    cid=$1
    wmiir cat /tag/sel/index|grep -E "^\<${cid}\> "|wc -l
}

function _wm_col_select() {
    echo select $1:$2 1| wmiir write /tag/sel/ctl
}

function _wm_tag_ls() {
    wmiir ls /tag | sed 's,/,,; /^sel$/d'
}

function _wm_tag_id() {
    wmiir read /tag/sel/ctl|head -n1
}

function _wm_tag_client_count() {
    wmiir read /tag/$1/index 2>/dev/null | grep '^[^#]' | wc -l
}

function _wm_is_alive() {
    [ $(os_lck_count ${LOCK_ALIVE}) -eq 0 ] && return 0 || return 1
}

function _wm_kp_process() {
    mapped=
    key=$1
    case $key in
        [a-z]|F[0-9]|F[0-9][0-9])
            mapped=$(wm_tag_data tid ${key})
        ;;
        [a-z0-9]\')
            key=$(printf ${key:0:1}|tr 'a-z' 'A-Z')
            mapped=$(wm_tag_data tid ${key})
        ;;
    esac
    if [ -n "${mapped}" ]; then
        logger DEBUG "map($key) = '$mapped'"
        if echo ${mapped}|grep -q '^!'; then
            wm_notifier 3 "${mapped}"&
            wm_tag_exec_cmd ${mapped}
        else
            wm_tag_focus "${mapped}"
        fi
    else
        wm_tag_focus "${key}"
    fi
}
#. }}
#. Private XX Functions ################################################## {{ ##
function cssh_menu() {
    source $GPG_AGENT
    if [ "$1" == "via_cssh_config" ]; then
        cluster=$(
            awk '{print$1}' $HOME/.clusterssh/clusters \
                | wimenu -h "${WMII_HIST}.cssh_conf" -n $WMII_HISTLIM
        )
        if [ -n "${cluster}" ]; then
            cssh -c $HOME/.clusterssh/clusters ${cluster}& disown
        fi
    elif [ "$1" == "via_ldap_netgroups" ]; then
        cluster=$(
            expand $(site ng list) \
                | wimenu -h "${WMII_HIST}.cssh_ldap" -n $WMII_HISTLIM
        )
        if [ -n "${cluster}" ]; then
            wm_tag_focus $cluster
            cssh $(site ng list ${cluster})& disown
        fi
    fi
}

#. }} ##########################################################################
#. Main Functions - Primary Provider to `wmiirc' ######################### {{ ##
function mn_process_key() {
    user_mn_process_key $1
    processed=1

    case $1 in
        #. ctrl-[a-z]|Special (Window Movements/Arrangements) {{
        #. Motion Keys
        ${MOD_MAIN}-Left)  wmiir xwrite /tag/sel/ctl 'select left';;
        ${MOD_MAIN}-Right) wmiir xwrite /tag/sel/ctl 'select right';;
        ${MOD_MAIN}-Up)    wmiir xwrite /tag/sel/ctl 'select up';;
        ${MOD_MAIN}-Down)  wmiir xwrite /tag/sel/ctl 'select down';;

        #. Movement Keys
        ${MOD_MAIN}-Control-Left|${MOD_MAIN}-Control-h)    wmiir xwrite /tag/sel/ctl 'send sel left'  2>/dev/null;;
        ${MOD_MAIN}-Control-Right|${MOD_MAIN}-Control-l)   wmiir xwrite /tag/sel/ctl 'send sel right' 2>/dev/null;;
        ${MOD_MAIN}-Control-Up|${MOD_MAIN}-Control-k)      wmiir xwrite /tag/sel/ctl 'send sel up'    2>/dev/null;;
        ${MOD_MAIN}-Control-Down|${MOD_MAIN}-Control-j)    wmiir xwrite /tag/sel/ctl 'send sel down'  2>/dev/null;;

        ${MOD_MAIN}-Control-Home)       wmiir xwrite /tag/sel/ctl 'colmode sel +stack-max';;
        ${MOD_MAIN}-Control-End)        wmiir xwrite /tag/sel/ctl 'colmode sel +default-max';;
        ${MOD_MAIN}-Control-Insert)     wmiir xwrite /tag/sel/ctl 'colmode sel +max';;
        ${MOD_MAIN}-Control-Delete)     wmiir xwrite /tag/sel/ctl 'send sel toggle';;
        ${MOD_MAIN}-Control-space)      wmiir xwrite /client/sel/ctl 'Fullscreen toggle';;
        ${MOD_MAIN}-Control-${MOD_ALT}-space) wmiir xwrite /tag/sel/ctl 'select toggle';;

        #. }}
        #. Resizing Columns {{
        #${MOD_MAIN}-Control-Left)  wmiir xwrite /tag/sel/ctl 'grow sel sel left +2';;
        #${MOD_MAIN}-Control-Right) wmiir xwrite /tag/sel/ctl 'grow sel sel left -2';;
        #${MOD_MAIN}-Mod1-Left)     wmiir xwrite /tag/sel/ctl 'grow sel sel right -2';;
        #${MOD_MAIN}-Mod1-Right)    wmiir xwrite /tag/sel/ctl 'grow sel sel right +2';;
        #. }}
        #. Return:event Execution and Shell Invocation {{
        ${MOD_MAIN}-Return) terminal&;;
        ${MOD_MAIN}-Shift-Return) terminal gnome-terminal&;;
        ${MOD_MAIN}-Control-Return) terminal xterm&;;
        ${MOD_SUPER}-space) surf http://www.google.com.au/&;;
        ${MOD_SUPER}-Return)
            progsfile="$(wmiir namespace)/.proglist"
            eval wmiir setsid "$(wimenu -h "${WMII_HIST}.progs" -n $WMII_HISTLIM < $progsfile)"& disown
        ;;

        ${MOD_SUPER}-Escape) wmiir xwrite /client/sel/ctl kill;;

        #. }}
        #. t:Tagging {{
        #. Switch to a well-known tag, or create a new tag
        ${MOD_SUPER}-t)
            tid=$(wm_tag_data tid '!' | wimenu -h "${WMII_HIST}.arbtags" -n ${WMII_HISTLIM})
            wm_tag_focus "${tid}"
        ;;

        #. Retag the selected client
        ${MOD_SUPER}-Control-t)
            cid=$(wm_cnt_sel)

            tid=$(_wm_tag_ls | wimenu -h "${WMII_HIST}.tags" -n ${WMII_HISTLIM})
            wmiir xwrite /client/$cid/tags "${tid}"
        ;;

        #. Copytag the selected client
        ${MOD_SUPER}-Shift-t)
            cid=$(wm_cnt_sel)
            #tags=$(wmiir read /client/$cid/tags)
            tid=$(_wm_tag_ls | wimenu -h "${WMII_HIST}.tags" -n ${WMII_HISTLIM})
            wmiir xwrite /client/$cid/tags "+${tid}"
        ;;
        #. }}
        #. Tab:Actions {{
        #. Swap to last selected tag
        ${MOD_MAIN}-Tab) wm_tag_focus ;;
        #. Swap to a well-known tag/appliance
        ${MOD_MAIN}-Shift-Tab)
            c=$(wm_cnt_sel)
            APPS=$(awk '$1~/!/&&$2!~/!/{print$2}' ${TAGZ})
            tid=$(expand ${APPS} | wimenu -h "${WMII_HIST}.apps" -n $WMII_HISTLIM)
            wmiir xwrite /ctl/ view ${tid}
        ;;

        #. Open wmii actions menu
        ${MOD_SUPER}-a)
            wmiir xwrite /event "$(expand $ACTIONS | wimenu -h "${WMII_HIST}.actions" -n $WMII_HISTLIM)"
        ;;
        #. }}
        #. mod-ctrl-[a-z] {{
        ${MOD_SUPER}-i) call search i ;;
        ${MOD_SUPER}-o) call search o ;;

        #. SSH/CSSH
        ${MOD_SUPER}-c) cssh_menu via_cssh_config ;;
        ${MOD_SUPER}-n) cssh_menu via_ldap_netgroups ;;
        ${MOD_SUPER}-s)
            host=$(awk '{print$1}' ~/.ssh/known_hosts | sort -u | wimenu  -S, -p "ssh:" -h "${WMII_HIST}.hosts" -n ${WMII_HISTLIM})
            e=$?
            if [ $e -eq 0 ]; then
                logger INFO "ssh(${host})"
                if ! grep -qE "\<${host}\>" ~/.ssh/known_hosts; then
                    host=$(site dns lookup pub ${host} | wimenu  -S, -p "ssh:" -h "${WMII_HIST}.hosts" -n ${WMII_HISTLIM})
                    e=$?
                fi
            fi
            if [ $e -eq 0 ]; then
                logger INFO "ssh(${host})"
                terminal -e ssh "${host}"& disown
            fi
        ;;

        #. X-Ray
        ${MOD_SUPER}-x)
            wm_xray_toggle
            wm_repaint $(_wm_tag_id)& disown
        ;;

        ${MOD_SUPER}-z)
            #xscreensaver-event -lock;
            #xlock -mode blank
            wm_tag_focus "snooze"
            (
                os_dpms off
                xtrlock -b
                wm_tag_focus
            )& disown
        ;;
        #. }}
        #. mod-{[a-zA-Z0-9],<F-keys>} {{
        ${MOD_MAIN}-F[0-9]|${MOD_MAIN}-F[0-9][0-9]|${MOD_MAIN}-[a-z0-9])
            key="$(echo $1|sed -e "s/${MOD_MAIN}-//")"
            logger DEBUG "_wm_kp_process($key)"
            _wm_kp_process "$key"
        ;;
        ${MOD_MAIN}-Shift-[a-z0-9])
            key="$(echo $1|sed -e "s/${MOD_MAIN}-Shift-//")'"
            logger DEBUG "_wm_kp_process($key')"
            _wm_kp_process "$key"
        ;;

        NOT-${MOD_MAIN}-Shift-[a-z0-9])
            key=$(echo $1|sed -e "s/${MOD_MAIN}-Shift-//")
            case $key in
                [0-9]) wmiir xwrite /client/sel/tags "$key";;
                [a-su-z])
                    mapped=$(wm_tag_data tid ${key})
                    [ -z "${mapped}" ] || wmiir xwrite /client/sel/tags "${mapped}"
                ;;
            esac
        ;;
        #. }}
        #. ctrl-alt-bspc:Warm quit {{
        ${MOD_SUPER}-Control-BackSpace) wm_quit;;

        Print)
            if [ -n "${SCREENSHOT_D}" ]; then
                test -d "${SCREENSHOT_D}" || mkdir -p "${SCREENSHOT_D}"
                cid=$(wm_cnt_sel)
                wm_notifier 2 "snap[$cid]!" alert&
                scrot -u -b ${SCREENSHOT_D}/${cid}-$(date +%Y%m%d-%H%M%S).png
            fi
        ;;
        ${MOD_SUPER}-Print)
            if [ -n "${SCREENSHOT_D}" ]; then
                wm_notifier 2 "snap[selection]!" alert&
                scrot -s ${SCREENSHOT_D}/sel-$(date +%Y%m%d-%H%M%S).png
            fi
        ;;
        #. }}
        #. reserved {{
        #. Control-Shift-Insert) #. Paste
        #. }}
        *)
            processed=0
        ;;
    esac

    return $processed
}

function mn_start() {
    call wm_start
}

function mn_quit() {
    lck ${LOCK_ALIVE} on
    c=99
    while [ $c -ne 0 ]; do
        wm_notifier 0 "quitting[$c]..."&
        sleep 1.05
        c=$(os_lck_count ${LOCK_SB_MULTIPLEX})
        call wm_quit
    done
    wm_notifier 0 "quitting[$c]...done" off&
    sleep 1.06
    wmiir xwrite /ctl quit
}

function _mn_sb_notifier_clear_loop() {
    logger INFO "loop(notifier)...start"
    while _wm_is_alive; do
        TTL=$(cat ${SB_NOTIFIER_LOCKFILE} 2>/dev/null)
        if [ -z "${TTL}" ]; then
            sleep 0.42
        elif [ $((${TTL} - $(date +'%s'))) -gt 0 ]; then
            sleep 0.53
        else
            wm_bar_rm ${WMII_TAG_NOTIFIER}
            rm -f ${SB_NOTIFIER_LOCKFILE}
        fi
    done
    logger INFO "loop(notifier)...stop"
}

function mn_bootstrap() {
    #. Bootstrap Locks {{
    logger INFO "bootstrapping mutexes and semaphores..."
    lck ${LOCK_ALERT} delete 2>/dev/null
    lck ${LOCK_ALERT} create 1

    lck ${LOCK_ALIVE} delete 2>/dev/null
    lck ${LOCK_ALIVE} create 1

    lck ${LOCK_SB_ALIVE} delete 2>/dev/null
    lck ${LOCK_SB_ALIVE} create 1

    lck ${LOCK_SB_MULTIPLEX} delete 2>/dev/null
    lck ${LOCK_SB_MULTIPLEX} create -s 32 1

    lck ${LOCK_SB_MODULE} delete 2>/dev/null
    lck ${LOCK_SB_MODULE} create -s 12 1

    lck ${LOCK_USER} delete 2>/dev/null
    lck ${LOCK_USER} create 1
    #. }}
    #. Bootstrap X {{
    logger INFO "bootstrapping X..."
    #( xcompmgr -CcfF -I-.015 -O-.03 -D6 -t-1 -l-3 -r4.2 -o.5 | plogger DEBUG xcompmgr )& disown
    xbindkeys
    xranderize

    #. Fonts: see .nomad/src/fonts for details:
    xset -fp /usr/share/fonts/X11/misc 2>/dev/null
    xset +fp /usr/share/fonts/X11/misc

    mkfontdir ~/.config/fontconfig/conf.d
    xset -fp ~/.config/fontconfig/conf.d 2>/dev/null
    xset +fp ~/.config/fontconfig/conf.d

    xset  fp rehash

    alsactl restore
    xset b 100 32767 20

    xmodmap ~/.Xmodmap

    xrdb -merge ~/.Xresources

    #. }}
    mkdir -p "${SCREENSHOT_D}"
    #. Bootstrap Notifier Status Bar Iterm {{
    logger INFO "bootstrapping notifier loop..."
    mkdir -p ${SB_MODULE}
    echo $(date +'%s') > ${SB_NOTIFIER_LOCKFILE}
    _mn_sb_notifier_clear_loop& disown
    #. }}
    #. Bootstrapping Proglist {{
    logger INFO "bootstrapping the proglist..."
    progsfile="$(wmiir namespace)/.proglist"
    _os_proglist $PATH > ${progsfile}
    #. }}
    #. Bootstrapping /ctl {{
    logger INFO "bootstrapping /ctl..."
    WMII_UFOCUS_COLORS=$(printf "#%06x #%06x #%06x" ${COL_FG[UFOC]} ${COL_BG[UFOC]} ${COL_BD[UFOC]})
    WMII_FOCUS_COLORS=$(printf "#%06x #%06x #%06x" ${COL_FG[FOCS]} ${COL_BG[FOCS]} ${COL_BD[FOCS]})
    WMII_ALERTER_COLORS=$(printf "#%06x #%06x #%06x" ${COL_FG[ALERTER]} ${COL_BG[ALERTER]} ${COL_BD[ALERTER]})
    WMII_NOTIFIER_COLORS=$(printf "#%06x #%06x #%06x" ${COL_FG[NOTIFIER]} ${COL_BG[NOTIFIER]} ${COL_BD[NOTIFIER]})
    wmiir write /ctl <<!
bar         on ${WMII_BARPOS}
border      ${WMII_BORDER_WIDTH}
focuscolors ${WMII_FOCUS_COLORS}
normcolors  ${WMII_UFOCUS_COLORS}
font        ${WMII_FONT}
fontpad     0 0 0 0
grabmod     ${MOD_MAIN}
colmode     default
incmode     squeeze
!
    #. }}
    #. Bootstrapping SBLoop {{
    logger INFO "bootstrapping the statusbar loop..."
    mn_sb_loop& disown
    #. }}
    #. Bootstrapping Configs {{
    logger INFO "bootstrapping configuration files..."
    mn_cf_rehash keys rules colrules events
    #. }}
    e_CreateTag ${FIRST_TAG_ID}
}

function mn_cf_rehash() {
    #. Another possibility is with inotify: inotifywait -e modify,create,delete,... -r ${WMII_ROOT}
    wm_notifier 0 "rehash(cf)..."

    touchit=0

    declare -a files
    forced=0
    if [ $# -eq 0 ]; then
        files=( core base user wmii events keys rules colrules statusbar tags )
    else
        files=( $@ )
        forced=1
    fi

    for file in ${files[@]}; do
        user_updated=0
        if [ ${forced} -eq 1 -o ${WMII_ROOT}/${file}.conf -nt ${WMII_ROOT}/wmiirc ]; then
            logger INFO "${file}.conf updated"
            wm_notifier 0 "rehash(cf:${file}.conf)..."
            e=1

            case $file in
                core|user|base|wmii|events)
                    logger INFO "sourcing ${file}.conf..."
                    ( . ${WMII_ROOT}/${file}.conf ) 2>/dev/null
                    e=$?
                    [ $e -ne 0 ] || . ${WMII_ROOT}/${file}.conf
                ;;
                statusbar)
                    logger INFO "sourcing ${file}.conf..."
                    ( . ${WMII_ROOT}/${file}.conf ) 2>/dev/null
                    e=$?
                ;;
                keys)
                    logger INFO "executing ${file}.conf into /${file}..."
                    ( bash ${WMII_ROOT}/${file}.conf ) >/dev/null 2>&1
                    e=$?
                    [ $e -ne 0 ] || bash ${WMII_ROOT}/${file}.conf | wmiir write /${file}
                    e=$?
                ;;
                rules|colrules)
                    logger INFO "catenating ${file}.conf into /${file}..."
                    cat ${WMII_ROOT}/${file}.conf | wmiir write /${file}
                    e=$?
                ;;
                tags)
                    #. tags.conf {{{
                    logger INFO "verifying ${file}.conf..."
                    duplicates_key=$(awk '$1~/^[^!%#]/{print$1}' ${WMII_ROOT}/${file}.conf|sort|uniq -D|wc -l)
                    duplicates_name=$(awk '$1~/^[^#]/{print$2}' ${WMII_ROOT}/${file}.conf|sort|uniq -D|wc -l)
                    if [ ${duplicates_key} -gt 0 ]; then
                        logger ERR "Duplicate keys: $(awk '$1~/^[^!#]/{print$1}' ${WMII_ROOT}/${file}.conf|sort|uniq -D|uniq)"
                    elif [ ${duplicates_name} -gt 0 ]; then
                        logger ERR "Duplicate names: $(awk '$1~/^[^#]/{print$2}' ${WMII_ROOT}/${file}.conf|sort|uniq -D|uniq)"
                    else
                        e=0
                    fi
                    #. }}
                ;;
            esac

            if [ $e -eq 0 ]; then
                wm_notifier 1 "rehash(cf:${file}.conf)...done"&
                ((touchit++))
                logger INFO "rehash(${file}.conf)...complete"
            else
                wm_notifier 1 "rehash(cf:${file}.conf)...failed"&
                logger CRIT "${file}.conf rehash failed"
            fi
        fi
    done

    if [ ${touchit} -gt 0 ]; then
        touch ${WMII_ROOT}/wmiirc
        wm_notifier 3 "rehash(cf)...complete (${touchit} files updated)"&
    else
        wm_notifier 3 "rehash(cf)...complete"&
    fi
}

function mn_sb_rehash_modules() {
    WM_SB_MODULES=( $(
        find "${WMII_ROOT}/statusbar.d/" \
            -maxdepth 1 -perm /111 -type f -name '[0-9][0-9]-*' -printf '%f\n' | sort -n
    ) )
    export WM_SB_MODULES
}

function mn_sb_setup() {
    printf "#%06x #%06x #%06x %s" ${COL_FG[NORM]}     ${COL_BG[NORM]}     ${COL_BD[NORM]}     ...             | wm_bar_mk ${WMII_TAG_NOTICE?}
    printf "#%06x #%06x #%06x %s" 0x5555ff            ${COL_BG[NORM]}     ${COL_BD[NORM]}     ${WMII_PROFILE} | wm_bar_mk ${WMII_TAG_PROFILE?}
    printf "#%06x #%06x #%06x %s" 0xeeeeee            ${COL_BG[NORM]}     ${COL_BD[NORM]}     ...             | wm_bar_mk ${WMII_TAG_CRUMBS?}
    printf "#%06x #%06x #%06x %s" 0xffcc33            ${COL_BG[NORM]}     ${COL_BD[NORM]}     ...             | wm_bar_mk ${WMII_TAG_ACTIVE?}
    printf "#%06x #%06x #%06x %s" ${COL_FG[ALERTER]}  ${COL_BG[ALERTER]}  ${COL_BD[ALERTER]}  ...             | wm_bar_mk ${WMII_TAG_ALERTER?}

    unset WM_SB_MODULES
    mn_sb_rehash_modules
    for mid in ${WM_SB_MODULES[@]}; do
        wm_notifier 0 "rehash(sb:${mid})..."
        flock="$(sb_state_f ${mid})"
        mkdir -p $(dirname ${flock})
        for button in ${MOUSE_L} ${MOUSE_R} ${MOUSE_M} ${MOUSE_U} ${MOUSE_D} ${MOUSE_S}; do
            echo 0 > ${flock}.${button}
        done
        printf "${mid}\n" | wm_bar_mk /rbar/${mid}
        touch ${flock}
        wm_sb_exec_module ${mid}& disown
    done
}

function mn_sb_cleanup() {
    for script in ${WM_SB_MODULES[@]}; do
        tid=$(basename ${script})
        flock="$(sb_state_f ${tid})"
        for button in ${MOUSE_L} ${MOUSE_R} ${MOUSE_M} ${MOUSE_U} ${MOUSE_D} ${MOUSE_S}; do
            rm -f ${flock}.${button}
        done
        wm_bar_rm /rbar/${tid}
    done
    wm_bar_rm ${WMII_TAG_NOTICE}
    wm_bar_rm ${WMII_TAG_ALERTER}
    wm_bar_rm ${WMII_TAG_NOTIFIER}
    wm_bar_rm ${WMII_TAG_ACTIVE}
    wm_bar_rm ${WMII_TAG_CRUMBS}
    wm_bar_rm ${WMII_TAG_PROFILE}
    unset WM_SB_MODULES
}

function mn_sb_loop() {
    lck ${LOCK_SB_ALIVE} on

    mn_sb_setup
    wm_notifier 3 "rehash(sb)...complete"&

    #. Then enter the maintenance loop...
    logger INFO "loop(modules)...start"
    while _wm_is_alive && [ ! -f ${SB_STATUS_LOCKFILE} ]; do
        local -i slept=0
        if [ "$(os_dpms)" == "on" ]; then
            if [ ${#WM_SB_MODULES[@]} -gt 0 ]; then
                for script in ${WM_SB_MODULES[@]}; do
                    if _wm_is_alive; then
                        mid=$(basename ${script})
                        wm_sb_exec_module ${mid}& disown
                    else
                        sleep ${STATUS_REFRESH}
                        slept=1
                    fi
                done
            fi
        fi
        [ ${slept} -eq 1 ] || sleep ${STATUS_REFRESH}
    done
    logger INFO "loop(modules)...stop"
    rm -f ${SB_STATUS_LOCKFILE}

    mn_sb_cleanup
    lck ${LOCK_SB_ALIVE} off
}

function mn_sb_rehash() {
    wm_notifier 0 "rehash(sb)..."
    #. Kill the already running mn_sb_loop()...
    c=$(os_lck_count ${LOCK_SB_ALIVE})
    if [ $c -eq 1 ]; then
        touch ${SB_STATUS_LOCKFILE}
        while [ -f ${SB_STATUS_LOCKFILE} ]; do
            sleep 1.09
        done
    fi
    #. And start it up again...
    mn_sb_loop& disown
}

#. }} ##########################################################################

function mn_event_handler() {
    processed=1

    event=$1
    cmd=$2
    shift 2
    args=$@

    case $event in
        #. Key Events
        Key) mn_process_key ${cmd}; processed=$? ;;

        #. Should only ever be called once at console->X time
        Start)
            mn_start
        ;;

        #. Quit when a new instance starts:
        Quit)
            logger NOTICE "event(${event,,})"
            mn_quit
        ;;

        Restart)
            logger NOTICE "event(${event,,})"
            wmiir xwrite /ctl exec
        ;;

        Rehash)
            logger NOTICE "event(${event,,}): ${cmd} $@"
            case "${cmd}" in
                cf) mn_cf_rehash $@;;
                sb) mn_sb_rehash;;
                *)
                    logger ERR "event(${event,,}) error; unknown command: ${cmd}"
                ;;
            esac
        ;;

        Help)
            setsid gxmessage -file ${WMII_ROOT}/tags.conf -center -borderless -buttons "Mkay"& disown
        ;;

        Weather)
            setsid gxmessage -file <(wget -q ftp://ftp2.bom.gov.au/anon/gen/fwo/IDN10064.txt -O-) -center -borderless -buttons "Mkay"& disown
        ;;

        Raw)
            logger NOTICE "event(${event,,}) raised: ${cmd} $@"
            ${cmd} $@|plogger NOTICE raw
            logger NOTICE "event(${event,,}) returned: $?"
        ;;

        #. Event-Handlers:
        *)
            if [ "$(type -t e_${event})" == "function" ]; then
                logger DEBUG "e_${event}($*)"
                e_${event} ${cmd} ${args}
            else
                processed=0
            fi
        ;;

    esac

    if [ ${processed} -eq 0 ]; then
        logger DEBUG "event(${event,,}) \`${cmd} ${@}' caught, but NOT handled."
    fi
}
#. }} ##########################################################################
