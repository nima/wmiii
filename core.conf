#!/bin/bash
: ${WMII_ROOT?}

#. ixpc -a "$WMII_ADDRESS" ls /
#. wmiir ls /
WMII_SOCKET="/tmp/ns.${USER}.${DISPLAY%.0}/wmii"
WMII_ADDRESS="unix!${WMII_SOCKET}"

WMII_SHM=/dev/shm/wmii
WMII_LOG=${WMII_SHM}/wmii.log

WMII_CACHE="${HOME}/.cache/wmiii"
WMII_CACHE_SHM_PERSIST="${HOME}/.cache/wmiii-shm"
WMII_CACHE_SHM="${WMII_SHM}/cache"

WMII_LOG_LEVEL=INFO
WMII_DATE_FORMAT='%b %d %a %H:%M:%S'

#. Core functions; none of these functions should depend in any way on X {{
#. Logging {{
declare -A WMII_LOG_NAMES=(
    [EMERG]=0 [ALERT]=1 [CRIT]=2 [ERR]=3
    [WARNING]=4 [NOTICE]=5 [INFO]=6 [DEBUG]=7
)
declare -A WMII_LOG_CODES=(
    [0]=EMERG [1]=ALERT [2]=CRIT [3]=ERR
    [4]=WARNING [5]=NOTICE [6]=INFO [7]=DEBUG
)

function logger() {
    declare code=${1}
    declare -i level=0
    case ${code} in
        EMERG|ALERT|CRIT|ERR|WARNING|NOTICE|INFO|DEBUG)
            level=${WMII_LOG_NAMES[${code}]}
        ;;
    esac

    declare -i fi=1
    case ${FUNCNAME[1]} in
        plogger|profiles)  fi=2;;
        *)                 fi=1;;
    esac
    caller=${FUNCNAME[${fi}]}

    if [ ${WMII_LOG_NAMES[${WMII_LOG_LEVEL}]} -ge ${level} ]; then
        shift 1
        declare ts=$(date +"${WMII_DATE_FORMAT}")

        declare msg=$(printf "%s; %5d; %8s[%24s];" "${ts}" "${$--1}" "${code}" "${caller}")
        if [ -f ${WMII_LOG} ]; then
            echo "${msg} $@" >> ${WMII_LOG}
        fi
        #printf "%s; %5d; %8s[%24s]; $@\n" "${ts}" "$$" "${code}" "$(sed -e 's/ /<-/g' <<< ${FUNCNAME[@]})" >> ${WMII_LOG}
    fi
}

function plogger() {
    #. FIXME - this function is gay - separate out stderr somehow
    ll=$1
    title=$2
    shift 2
    while read line; do
        if [ -n "${line}" ]; then
            if ! [[ "${line}" =~ ^\'(stack|max|default)\'\ [-+]$ ]]; then
                logger "${ll}" "${title}->[${line}]"
            fi
        fi
    done
}
#. }}
#. Locking {{
function lck() {
    : ${lck:=$(which lck)}
    ${lck?} $*
    return $?
}
#. }}
#. Sourcing {{
alias .=source
#function .() {
#    #. Drop-in replacement for source, but additionally removes all functions
#    #. that start with an underscore - in the context of this set-up, we treat
#    #. all such functionas as `private' functions, bound to the file in which
#    #. they were declared.
#
#    read -a before <<< "$(declare -F|awk '$3~/^_/{print$3}')"
#    source $1
#    read -a after  <<< "$(declare -F|awk '$3~/^_/{print$3}')"
#    for fna in ${after[@]}; do
#        is_new=1
#        for fnb in ${before[@]}; do
#            if [ "${fnb}" == "${fna}" ]; then
#                is_new=0
#                break
#            fi
#        done
#        [ ${is_new} -ne 1 ] || unset ${fna}
#    done
#    unset before
#    unset after

    #$(test ! -f ${WMII_ROOT}/sb-socks.conf || cat ${WMII_ROOT}/sb-socks.conf)
    #$(test ! -f ${WMII_ROOT}/sb-socks@${WMII_PROFILE}.conf || cat ${WMII_ROOT}/sb-socks@${WMII_PROFILE}.conf)
    #$(test ! -f ${WMII_ROOT}/sb-screens.conf || cat ${WMII_ROOT}/sb-screens.conf)
    #$(test ! -f ${WMII_ROOT}/sb-screens@${WMII_PROFILE}.conf || cat ${WMII_ROOT}/sb-screens@${WMII_PROFILE}.conf)
#}
#. }}

function expand() {
    echo $* | awk 'BEGIN{RS=" +"}{print$1}'
}

function profiles() {
    local e=-1
    if [ $# -ge 2 ]; then
        operator=$1
        shift
        if [ "${operator}" == "+" ]; then
            e=1
        elif [ "${operator}" == "-" ]; then
            e=0
        fi

        if [ $e -ne -1 ]; then
            for profile in $@; do
                if [ "${profile}" == "${WMII_PROFILE}" ]; then
                    ((e=!e))
                    break
                fi
            done
        fi
        if [ $e -ne 0 ]; then
            logger NOTICE "profile($(basename $0))...failed /* exit($e) */"
        fi
    fi
    return $e
}

function requires() {
    local e=0
    local x
    for x in $@; do
        if echo $x|grep -q '/'; then
            if [ ! -e $x ]; then
                e=2
                break
            fi
        else
            which $x > /dev/null 2>&1
            if [ $? -ne 0 ]; then
                e=1
                break
            fi
        fi
    done
    if [ $e -ne 0 ]; then
        logger NOTICE "failed executable requirement for ${x}; exiting."
    fi
    return $e
}

#. A note on ~/.secret: it should be your GPG encrypted file containing lines
#. of the following form: <name> <password>\n
#.
#. This function is a light-weight replacement for bin/secret
function secret() {
    local e=1
    if requires gpg2; then
        if [ -n "$1" -a -e ${HOME}/.secrets ]; then
            logger INFO "looking up secret ${1}..."
            if [ -n "${GPG_AGENT}" ]; then
                source ${GPG_AGENT}
                gpg2 --batch -q -d ${HOME}/.secrets|sed -n "s/^$1 \+\(.*\)$/\1/p"
                e=$?
                if [ $e -ne 0 ]; then
                    logger WARNING "looking up secret ${1} returned ${e}"
                fi
            fi
        else
            logger WARNING "${HOME}/.secrets doesn't exist; can't look up ${1} secret."
        fi
    fi
    return $e
}

function beeper() {
    beep=$1
    if [ "${beep}" == "on" -o "${beep}" == "1" ]; then
        beep \
            -l50  -f2000 -n\
            -l50  -f3400 -n\
            -l100 -f4000& disown
    elif [ "${beep}" == "off" -o "${beep}" == "0" ]; then
        beep \
            -l50  -f4000 -n\
            -l50  -f3400 -n\
            -l100 -f2000& disown
    elif [ "${beep}" == "create" ]; then
        return
        beep -l20 -f2000 -n -l50 -f5000 -n -l90 -f9000& disown
    elif [ "${beep}" == "delete" ]; then
        return
        beep -l90 -f9000 -n -l50 -f5000 -n -l20 -f2000& disown
    elif [ "${beep}" == "alert" ]; then
        beep -d10 -l50 -f4000 -r4& disown
    fi
}
#. }}

SB_MODULE=${WMII_SHM}/statusbar
SB_STATUS_LOCKFILE=${SB_MODULE}/.status_loop
SB_ALERTER_LOCKFILE=${SB_MODULE}/.alerter_loop
SB_NOTIFIER_LOCKFILE=${SB_MODULE}/.notifier_loop
function sb_module_d() { echo ${SB_MODULE}/${1?}; }
function sb_stage_f()  { echo ${SB_MODULE}/${1?}/stage; }
function sb_state_f()  { echo ${SB_MODULE}/${1?}/state; }
function sb_prgrs_f()  { echo ${SB_MODULE}/${1?}/prgrs; }
function sb_cache_f()  { echo ${SB_MODULE}/${1?}/cache; }
